
==================== FINAL INTERFACE ====================
2017-10-10 02:39:20.169729 UTC

interface Cards-0.1.0.0-GKarZj0i4zNLPNCr09Icx8:Lib 8002
  interface hash: bb761c6424257d0c1751f80d79a2b1a6
  ABI hash: 5164e7547a89ccd8fb73680c563c9842
  export-list hash: 340479113fd800c8ac1279088b2e8960
  orphan hash: ee47cc867d8253cfc7514ad3f2c98fec
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.someFunc
module dependencies: Card
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  Card 18bdccb50a431a9024b82562aed7f8d7
  exports: d01c6737a220f4219b30dd0826666dc3
  standardDeck 8d52ad7d494b8a372e144b669072666c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
d1a219e2274ac3c4df0e4098e692bb44
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (Card.Rank, Card.Suit) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (Card.Rank, Card.Suit)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ Card.Rank
                   @ Card.Suit
                   Card.$fShowRank
                   Card.$fShowSuit
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0f325b64480d37ab256ce741a5342d8a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
ffb935f9f1bbaa12dbda47b2008b7bac
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
6f7799068bde988686f3d7a7e3e80f10
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Cards-0.1.0.0-GKarZj0i4zNLPNCr09Icx8"#) -}
67697c1351068747039e1876d8df5ee8
  someFunc :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
bb86753362b6ec026d79c1949f3e1447
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Lib.someFunc2 Card.standardDeck) -}
98e76f0de89a9955ab36f62b0fe3836b
  someFunc2 ::
    [Card.Card]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
"SPEC/Lib $fShow(,)_$cshow @ Rank @ Suit" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                        Card.Suit)
                                                          ($dShow :: GHC.Show.Show Card.Rank)
  GHC.Show.$fShow(,)_$cshow @ Card.Rank @ Card.Suit $dShow $dShow1
  = Lib.$s$fShow(,)_$s$fShow(,)_$cshow
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

