
==================== FINAL INTERFACE ====================
2017-10-10 02:29:50.158479 UTC

interface Cards-0.1.0.0-GKarZj0i4zNLPNCr09Icx8:Data.Card 8002
  interface hash: fafd347fa74e79c0d6e3d7a0229edaca
  ABI hash: 72cbb55ad84b2ff40e23d0ae6033e6d0
  export-list hash: d7d41d3880db1eacaba455089544dae7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1b716ccba023e2e393ed48709db7add9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Card.standardDeck
  Data.Card.Card
  Data.Card.Deck
  Data.Card.Rank{Data.Card.Ace Data.Card.Eight Data.Card.Five Data.Card.Four Data.Card.Jack Data.Card.King Data.Card.Nine Data.Card.Queen Data.Card.Seven Data.Card.Six Data.Card.Ten Data.Card.Three Data.Card.Two}
  Data.Card.Suit{Data.Card.Clubs Data.Card.Diamonds Data.Card.Hearts Data.Card.Spades}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank :: GHC.Enum.Enum Data.Card.Rank
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fEnumRank_$csucc
                  Data.Card.$fEnumRank_$cpred
                  Data.Card.$fEnumRank_$ctoEnum
                  Data.Card.$fEnumRank_$cfromEnum
                  Data.Card.$fEnumRank_$cenumFrom
                  Data.Card.$fEnumRank_$cenumFromThen
                  Data.Card.$fEnumRank_$cenumFromTo
                  Data.Card.$fEnumRank_$cenumFromThenTo -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank1 :: GHC.Prim.Int# -> Data.Card.Rank
  {- Arity: 1, Strictness: <L,U>x -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank2 :: Data.Card.Rank
  {- Strictness: x -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank3 :: Data.Card.Rank
  {- Strictness: x -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cenumFrom :: Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Data.Card.Rank) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 12#) of wild {
                   GHC.Types.False -> Data.Card.$fEnumRank_go x0
                   GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cenumFromThen ::
    Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [Data.Card.Rank]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [Data.Card.Rank]
                            Data.Card.$fEnumRank_c1
                            (GHC.Types.[] @ Data.Card.Rank)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [Data.Card.Rank]
                            Data.Card.$fEnumRank_c1
                            (GHC.Types.[] @ Data.Card.Rank)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 12# GHC.Types.True -> $j 0# }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cenumFromThenTo ::
    Data.Card.Rank
    -> Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: Data.Card.Rank)
                   (x2 :: Data.Card.Rank)
                   (y :: Data.Card.Rank) ->
                 let {
                   x4 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [Data.Card.Rank]
                        Data.Card.$fEnumRank_c
                        (GHC.Types.[] @ Data.Card.Rank)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ Data.Card.Rank y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [Data.Card.Rank]
                        Data.Card.$fEnumRank_c
                        (GHC.Types.[] @ Data.Card.Rank)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ Data.Card.Rank y) }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cenumFromTo ::
    Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go4 :: GHC.Prim.Int# -> [Data.Card.Rank]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ Data.Card.Rank
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> Data.Card.$fEnumRank1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 12#) of wild2 {
                                    GHC.Types.False -> Data.Card.$fEnumRank1 x1
                                    GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Rank x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go4 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank })
                      } in
                      go4 x0
                   GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cfromEnum :: Data.Card.Rank -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ Data.Card.Rank x1) }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$cpred :: Data.Card.Rank -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ Data.Card.Rank (GHC.Prim.+# wild -1#)
                   0# -> Data.Card.$fEnumRank2 } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$csucc :: Data.Card.Rank -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ Data.Card.Rank (GHC.Prim.+# wild 1#)
                   12# -> Data.Card.$fEnumRank3 } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_$ctoEnum :: GHC.Types.Int -> Data.Card.Rank
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Data.Card.$w$ctoEnum ww1 }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_c ::
    GHC.Types.Int -> [Data.Card.Rank] -> [Data.Card.Rank]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Data.Card.Rank]) ->
                 GHC.Types.:
                   @ Data.Card.Rank
                   (Data.Card.$fEnumRank_$ctoEnum x)
                   ys) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_c1 ::
    GHC.Types.Int -> [Data.Card.Rank] -> [Data.Card.Rank]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Data.Card.Rank]) ->
                 GHC.Types.:
                   @ Data.Card.Rank
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ Data.Card.Rank a })
                   ys) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEnumRank_go :: GHC.Prim.Int# -> [Data.Card.Rank]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit :: GHC.Enum.Enum Data.Card.Suit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fEnumSuit_$csucc
                  Data.Card.$fEnumSuit_$cpred
                  Data.Card.$fEnumSuit_$ctoEnum
                  Data.Card.$fEnumSuit_$cfromEnum
                  Data.Card.$fEnumSuit_$cenumFrom
                  Data.Card.$fEnumSuit_$cenumFromThen
                  Data.Card.$fEnumSuit_$cenumFromTo
                  Data.Card.$fEnumSuit_$cenumFromThenTo -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit1 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go4 3#) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit2 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go5 2#) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit3 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go6 1#) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit4 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go7 0#) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit5 :: GHC.Prim.Int# -> Data.Card.Suit
  {- Arity: 1, Strictness: <L,U>x -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit6 :: Data.Card.Suit
  {- Strictness: x -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit7 :: Data.Card.Suit
  {- Strictness: x -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cenumFrom :: Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.$fEnumSuit4
                   Data.Card.Diamonds -> Data.Card.$fEnumSuit3
                   Data.Card.Hearts -> Data.Card.$fEnumSuit2
                   Data.Card.Spades -> Data.Card.$fEnumSuit1 }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cenumFromThen ::
    Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 let {
                   $j :: GHC.Prim.Int# -> [Data.Card.Suit]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [Data.Card.Suit]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [Data.Card.Suit]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Data.Card.Suit]
                                    Data.Card.$fEnumSuit_c
                                    (GHC.Types.[] @ Data.Card.Suit)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Data.Card.Suit]
                                    Data.Card.$fEnumSuit_c
                                    (GHC.Types.[] @ Data.Card.Suit)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       Data.Card.Clubs -> $j1 0#
                       Data.Card.Diamonds -> $j1 1#
                       Data.Card.Hearts -> $j1 2#
                       Data.Card.Spades -> $j1 3# }
                 } in
                 case a of wild {
                   Data.Card.Clubs -> $j 0#
                   Data.Card.Diamonds -> $j 1#
                   Data.Card.Hearts -> $j 2#
                   Data.Card.Spades -> $j 3# }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cenumFromThenTo ::
    Data.Card.Suit
    -> Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cenumFromTo ::
    Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 let {
                   $j :: GHC.Prim.Int# -> [Data.Card.Suit]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Data.Card.Clubs
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Diamonds
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Hearts
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Spades
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go x1
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit } }
                 } in
                 case x of wild {
                   Data.Card.Clubs -> $j 0#
                   Data.Card.Diamonds -> $j 1#
                   Data.Card.Hearts -> $j 2#
                   Data.Card.Spades -> $j 3# }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cfromEnum :: Data.Card.Suit -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> GHC.Types.I# 0#
                   Data.Card.Diamonds -> GHC.Types.I# 1#
                   Data.Card.Hearts -> GHC.Types.I# 2#
                   Data.Card.Spades -> GHC.Types.I# 3# }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$cpred :: Data.Card.Suit -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.$fEnumSuit6
                   Data.Card.Diamonds -> Data.Card.Clubs
                   Data.Card.Hearts -> Data.Card.Diamonds
                   Data.Card.Spades -> Data.Card.Hearts }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$csucc :: Data.Card.Suit -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.Diamonds
                   Data.Card.Diamonds -> Data.Card.Hearts
                   Data.Card.Hearts -> Data.Card.Spades
                   Data.Card.Spades -> Data.Card.$fEnumSuit7 }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_$ctoEnum :: GHC.Types.Int -> Data.Card.Suit
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Data.Card.$w$ctoEnum1 ww1 }) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_c ::
    GHC.Types.Int -> [Data.Card.Suit] -> [Data.Card.Suit]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Data.Card.Suit]) ->
                 GHC.Types.:
                   @ Data.Card.Suit
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ Data.Card.Suit a })
                   ys) -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go1 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go2 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go3 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go4 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go5 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go6 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
62e1904c485626626dc2ef5e59abc790
  $fEnumSuit_go7 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEqRank :: GHC.Classes.Eq Data.Card.Rank
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank Data.Card.$fEqRank_$c== Data.Card.$fEqRank_$c/= -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEqRank_$c/= :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fEqRank_$c== :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) } }) -}
62e1904c485626626dc2ef5e59abc790
  $fEqSuit :: GHC.Classes.Eq Data.Card.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit Data.Card.$fEqSuit_$c== Data.Card.$fEqSuit_$c/= -}
62e1904c485626626dc2ef5e59abc790
  $fEqSuit_$c/= :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Clubs -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Diamonds -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Hearts -> GHC.Types.False }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.False } }) -}
62e1904c485626626dc2ef5e59abc790
  $fEqSuit_$c== :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Data.Card.Suit) (ds1 :: Data.Card.Suit) ->
                 case ds of wild {
                   Data.Card.Clubs
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Clubs -> GHC.Types.True }
                   Data.Card.Diamonds
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Diamonds -> GHC.Types.True }
                   Data.Card.Hearts
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Hearts -> GHC.Types.True }
                   Data.Card.Spades
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.True } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank :: GHC.Classes.Ord Data.Card.Rank
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fEqRank
                  Data.Card.$fOrdRank_$ccompare
                  Data.Card.$fOrdRank_$c<
                  Data.Card.$fOrdRank_$c<=
                  Data.Card.$fOrdRank_$c>
                  Data.Card.$fOrdRank_$c>=
                  Data.Card.$fOrdRank_$cmax
                  Data.Card.$fOrdRank_$cmin -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$c< :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$c<= ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$c> :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$c>= ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                      (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$ccompare ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank x2
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Data.Card.Rank x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$cmax ::
    Data.Card.Rank -> Data.Card.Rank -> Data.Card.Rank
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fOrdRank_$cmin ::
    Data.Card.Rank -> Data.Card.Rank -> Data.Card.Rank
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x1)
                           (GHC.Prim.dataToTag# @ Data.Card.Rank x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit :: GHC.Classes.Ord Data.Card.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fEqSuit
                  Data.Card.$fOrdSuit_$ccompare
                  Data.Card.$fOrdSuit_$c<
                  Data.Card.$fOrdSuit_$c<=
                  Data.Card.$fOrdSuit_$c>
                  Data.Card.$fOrdSuit_$c>=
                  Data.Card.$fOrdSuit_$cmax
                  Data.Card.$fOrdSuit_$cmin -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$c< :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.False
                        Data.Card.Diamonds -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Spades
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$c<= ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.False
                        Data.Card.Diamonds -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.True } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$c> :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.True
                        Data.Card.Diamonds -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.False } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$c>= ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.True
                        Data.Card.Diamonds -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Spades
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$ccompare ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.EQ
                        Data.Card.Diamonds -> GHC.Types.LT
                        Data.Card.Hearts -> GHC.Types.LT
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.GT
                        Data.Card.Diamonds -> GHC.Types.EQ
                        Data.Card.Hearts -> GHC.Types.LT
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Data.Card.Hearts -> GHC.Types.EQ
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT Data.Card.Spades -> GHC.Types.EQ } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$cmax ::
    Data.Card.Suit -> Data.Card.Suit -> Data.Card.Suit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 case x of wild {
                   Data.Card.Clubs -> y
                   Data.Card.Diamonds
                   -> case y of wild1 {
                        DEFAULT -> Data.Card.Diamonds
                        Data.Card.Hearts -> Data.Card.Hearts
                        Data.Card.Spades -> Data.Card.Spades }
                   Data.Card.Hearts
                   -> case y of wild1 {
                        DEFAULT -> Data.Card.Hearts Data.Card.Spades -> Data.Card.Spades }
                   Data.Card.Spades
                   -> case y of wild1 { DEFAULT -> Data.Card.Spades } }) -}
62e1904c485626626dc2ef5e59abc790
  $fOrdSuit_$cmin ::
    Data.Card.Suit -> Data.Card.Suit -> Data.Card.Suit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 case x of wild {
                   Data.Card.Clubs -> case y of wild1 { DEFAULT -> Data.Card.Clubs }
                   Data.Card.Diamonds
                   -> case y of wild1 {
                        Data.Card.Clubs -> Data.Card.Clubs
                        Data.Card.Diamonds -> Data.Card.Diamonds
                        Data.Card.Hearts -> Data.Card.Diamonds
                        Data.Card.Spades -> Data.Card.Diamonds }
                   Data.Card.Hearts
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Data.Card.Hearts -> Data.Card.Hearts
                        Data.Card.Spades -> Data.Card.Hearts }
                   Data.Card.Spades -> y }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fShowRank :: GHC.Show.Show Data.Card.Rank
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fShowRank_$cshowsPrec
                  Data.Card.$fShowRank_$cshow
                  Data.Card.$fShowRank_$cshowList -}
8944eb950b332f2047fd4579d82c4286
  $fShowRank1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ace"#) -}
babf7a720685fd9541f5881d209ca4ce
  $fShowRank10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Five"#) -}
0f52d9bb658dc81107ee279a4dffcca4
  $fShowRank11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Four"#) -}
eb2044791634fe684cb48d16539a40f0
  $fShowRank12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Three"#) -}
52e75951d7280d8a72466ea023c45ea5
  $fShowRank13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Two"#) -}
192172afe8d7e1b9751ed4b07abd7ab6
  $fShowRank2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "King"#) -}
e5df3fa337c9a5417f4028f93f9f163c
  $fShowRank3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Queen"#) -}
2232e2fe833b76095237af208fa80303
  $fShowRank4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Jack"#) -}
e44950930d57086bc1299aa7eb929dfa
  $fShowRank5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ten"#) -}
498d0201911948a88605684492a87c85
  $fShowRank6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nine"#) -}
84a82c34180143d7cb2668f4c5fe478b
  $fShowRank7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Eight"#) -}
8fa2c76b9b0d5b4dcf12188377bc6601
  $fShowRank8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Seven"#) -}
446eaf33a3ab17b695d51a7dd5de8920
  $fShowRank9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Six"#) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fShowRank_$cshow :: Data.Card.Rank -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Card.Rank) ->
                 Data.Card.$fShowRank_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fShowRank_$cshowList :: [Data.Card.Rank] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Card.Rank
                   Data.Card.$w$cshowsPrec) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $fShowRank_$cshowsPrec ::
    GHC.Types.Int -> Data.Card.Rank -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Card.Rank)
                   (w2 :: GHC.Base.String) ->
                 Data.Card.$w$cshowsPrec w1 w2) -}
62e1904c485626626dc2ef5e59abc790
  $fShowSuit :: GHC.Show.Show Data.Card.Suit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fShowSuit_$cshowsPrec
                  Data.Card.$fShowSuit_$cshow
                  Data.Card.$fShowSuit_$cshowList -}
ab0fe3d0e1aa0c1f759e48dacf31ee76
  $fShowSuit1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Spades"#) -}
4c153ee19dd951ac0f203a419e0cbe6d
  $fShowSuit2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hearts"#) -}
1486be787b51757e3020a4e75cd730cc
  $fShowSuit3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Diamonds"#) -}
28697dae6ead23292957602591d4498c
  $fShowSuit4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Clubs"#) -}
62e1904c485626626dc2ef5e59abc790
  $fShowSuit_$cshow :: Data.Card.Suit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Card.Suit) ->
                 Data.Card.$fShowSuit_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
62e1904c485626626dc2ef5e59abc790
  $fShowSuit_$cshowList :: [Data.Card.Suit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Card.Suit
                   Data.Card.$w$cshowsPrec1) -}
62e1904c485626626dc2ef5e59abc790
  $fShowSuit_$cshowsPrec ::
    GHC.Types.Int -> Data.Card.Suit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Card.Suit)
                   (w2 :: GHC.Base.String) ->
                 Data.Card.$w$cshowsPrec1 w1 w2) -}
01f5c6747c8b0738e67a74d2ac4b5c48
  $tc'Ace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2760014638260058159##
                   3259091468293029894##
                   Data.Card.$trModule
                   Data.Card.$tc'Ace1) -}
1ea58587b094a9983ea15f235f903781
  $tc'Ace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ace"#) -}
f46606e8a2fb2157ca0bbfdf71837d49
  $tc'Clubs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1569331371374541431##
                   13242281249097002171##
                   Data.Card.$trModule
                   Data.Card.$tc'Clubs1) -}
a4ae17234adafa897285c8326322574f
  $tc'Clubs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Clubs"#) -}
366a88486d3e84645942b3464e751ed9
  $tc'Diamonds :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5641351581708149656##
                   4448627624938643417##
                   Data.Card.$trModule
                   Data.Card.$tc'Diamonds1) -}
482e379fe21ba47dd9258381f9920c89
  $tc'Diamonds1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Diamonds"#) -}
c8eed5bad72096321401844d0153f66a
  $tc'Eight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16231324891898079830##
                   815177838495530517##
                   Data.Card.$trModule
                   Data.Card.$tc'Eight1) -}
27b9669d27489c65713daeeea82e4278
  $tc'Eight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eight"#) -}
50099377213703409ee79e3db5f9ba9e
  $tc'Five :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7829641970204347362##
                   2646051530538186018##
                   Data.Card.$trModule
                   Data.Card.$tc'Five1) -}
98c7c43129de7d8e512c42ae2369ebbc
  $tc'Five1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Five"#) -}
8167f54f2e980cafc019c689cd4a18ff
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14945404443854622972##
                   14218256978094963656##
                   Data.Card.$trModule
                   Data.Card.$tc'Four1) -}
c3a5fee5061315dfeceec65fc22df674
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Four"#) -}
b85165a982c4cf19770fb364d90f8aa3
  $tc'Hearts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1277731648913998812##
                   9610744375567182854##
                   Data.Card.$trModule
                   Data.Card.$tc'Hearts1) -}
c3a7d0cce851fcc895e76d3136c6fc8f
  $tc'Hearts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Hearts"#) -}
7b003e938bcb50fc3f27627b788cde1c
  $tc'Jack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5599763807931063826##
                   4377752195206747821##
                   Data.Card.$trModule
                   Data.Card.$tc'Jack1) -}
8362315c2831f506b9b3af89db6ccfa4
  $tc'Jack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Jack"#) -}
0a16948b9822ce65fc7292beac66b55d
  $tc'King :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1890749797776461526##
                   11934664203151096736##
                   Data.Card.$trModule
                   Data.Card.$tc'King1) -}
040f19f650994fbb0f522ef09bdc000f
  $tc'King1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'King"#) -}
2dec01668c484d134ea85ce68aa9a301
  $tc'Nine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8509345851157168728##
                   370847395159356470##
                   Data.Card.$trModule
                   Data.Card.$tc'Nine1) -}
ae00b12684de708d6418c8274afe32d8
  $tc'Nine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nine"#) -}
9aea9be2786667d0d59d0872eda01fc6
  $tc'Queen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2889642285386018596##
                   7954514881806190602##
                   Data.Card.$trModule
                   Data.Card.$tc'Queen1) -}
b8366a6fa74611abbc16c6e4abb78130
  $tc'Queen1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Queen"#) -}
7341a44029bd751b6cd3a8fb4950e084
  $tc'Seven :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15798628912865391457##
                   14331799714869467945##
                   Data.Card.$trModule
                   Data.Card.$tc'Seven1) -}
8970f4808104763f7cc6c051ffceb50f
  $tc'Seven1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Seven"#) -}
056e8270058f8d1126f4a5f35ca5c3ab
  $tc'Six :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15442942420963712037##
                   4490886700635873196##
                   Data.Card.$trModule
                   Data.Card.$tc'Six1) -}
a2c59448916c5b6c993ea0b25b46af29
  $tc'Six1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Six"#) -}
a35fd234c29e0c74f9ad8f17cb58dd49
  $tc'Spades :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5767296083474187351##
                   12001144850814077628##
                   Data.Card.$trModule
                   Data.Card.$tc'Spades1) -}
9abb078f9b7b4b22e56e966d5febf421
  $tc'Spades1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Spades"#) -}
4a7601884c2ca34983e037fbb6a94302
  $tc'Ten :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16401881509521409711##
                   14309016857823263024##
                   Data.Card.$trModule
                   Data.Card.$tc'Ten1) -}
ef4f7da5ba3ab0e98fc7269a90b20b33
  $tc'Ten1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ten"#) -}
63d5b50438c0f5c6d2296e5330ff0ec0
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15372317714984509280##
                   12744670219118650435##
                   Data.Card.$trModule
                   Data.Card.$tc'Three1) -}
b0d947e8279d288968cbd9d4c90760db
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Three"#) -}
336ac0fc4af6e0ab29db7126c8e9fcda
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   458299301262372579##
                   12806560772113400122##
                   Data.Card.$trModule
                   Data.Card.$tc'Two1) -}
107668e36d262244015cc1bb1b845290
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Two"#) -}
d8166e7c8e85160cc8f544ae6fd800b9
  $tcRank :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12456545370972141816##
                   4117715282842608783##
                   Data.Card.$trModule
                   Data.Card.$tcRank1) -}
6fcad15511b77bdb187e79c2ce092dd6
  $tcRank1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rank"#) -}
b2d4bb173e04f40a908f1a20820c9677
  $tcSuit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4811433082695016847##
                   183641075210942352##
                   Data.Card.$trModule
                   Data.Card.$tcSuit1) -}
669f2cafdf256f328e1a854a29f003b2
  $tcSuit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Suit"#) -}
261a3a9a3d36fc41bc51e34bf0ea8457
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Card.$trModule2
                   Data.Card.$trModule1) -}
de30419a6435b46a88e2cc761f057d52
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Card"#) -}
d626fd20ccc3a7bade5c07f672f8ee2d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Cards-0.1.0.0-GKarZj0i4zNLPNCr09Icx8"#) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $w$cshowsPrec ::
    Data.Card.Rank -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Card.Rank) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Card.Two
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank13 w1
                   Data.Card.Three
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank12 w1
                   Data.Card.Four
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank11 w1
                   Data.Card.Five
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank10 w1
                   Data.Card.Six
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank9 w1
                   Data.Card.Seven
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank8 w1
                   Data.Card.Eight
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank7 w1
                   Data.Card.Nine
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank6 w1
                   Data.Card.Ten
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank5 w1
                   Data.Card.Jack
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank4 w1
                   Data.Card.Queen
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank3 w1
                   Data.Card.King
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank2 w1
                   Data.Card.Ace
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank1 w1 }) -}
62e1904c485626626dc2ef5e59abc790
  $w$cshowsPrec1 ::
    Data.Card.Suit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Card.Suit) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Card.Clubs
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit4 w1
                   Data.Card.Diamonds
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit3 w1
                   Data.Card.Hearts
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit2 w1
                   Data.Card.Spades
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit1 w1 }) -}
dc9f88d1def648d7d3e6cc21ded75f3f
  $w$ctoEnum :: GHC.Prim.Int# -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Data.Card.$fEnumRank1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 12#) of wild1 {
                        GHC.Types.False -> Data.Card.$fEnumRank1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Rank ww } }) -}
62e1904c485626626dc2ef5e59abc790
  $w$ctoEnum1 :: GHC.Prim.Int# -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Data.Card.$fEnumSuit5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3#) of wild1 {
                        GHC.Types.False -> Data.Card.$fEnumSuit5 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Suit ww } }) -}
c051793cd40895800a05312b21293a6c
  type Card = (Data.Card.Rank, Data.Card.Suit)
f5d503d1510caa9d411011e9326cd251
  type Deck = [Data.Card.Card]
dc9f88d1def648d7d3e6cc21ded75f3f
  data Rank
    = Two
    | Three
    | Four
    | Five
    | Six
    | Seven
    | Eight
    | Nine
    | Ten
    | Jack
    | Queen
    | King
    | Ace
62e1904c485626626dc2ef5e59abc790
  data Suit = Clubs | Diamonds | Hearts | Spades
632c154ef0a8e4ce74dc25ec529e693a
  standardDeck :: Data.Card.Deck
  {- Unfolding: (Data.Card.standardDeck_go 0#) -}
c44afe1747a4e08bc27b6c78736b8e50
  standardDeck_go :: GHC.Prim.Int# -> [Data.Card.Card]
  {- Arity: 1, Strictness: <L,U> -}
instance [safe] GHC.Enum.Enum [Data.Card.Rank]
  = Data.Card.$fEnumRank
instance [safe] GHC.Enum.Enum [Data.Card.Suit]
  = Data.Card.$fEnumSuit
instance [safe] GHC.Classes.Eq [Data.Card.Rank]
  = Data.Card.$fEqRank
instance [safe] GHC.Classes.Eq [Data.Card.Suit]
  = Data.Card.$fEqSuit
instance [safe] GHC.Classes.Ord [Data.Card.Rank]
  = Data.Card.$fOrdRank
instance [safe] GHC.Classes.Ord [Data.Card.Suit]
  = Data.Card.$fOrdSuit
instance [safe] GHC.Show.Show [Data.Card.Rank]
  = Data.Card.$fShowRank
instance [safe] GHC.Show.Show [Data.Card.Suit]
  = Data.Card.$fShowSuit
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

