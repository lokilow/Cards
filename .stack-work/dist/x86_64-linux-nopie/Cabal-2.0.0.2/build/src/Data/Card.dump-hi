
==================== FINAL INTERFACE ====================
2017-10-10 03:20:45.736956529 UTC

interface Cards-0.1.0.0-Ex6GYQCLQeJFDIXDBioJ3g:Data.Card 8021
  interface hash: ce5af4d80e82072a4b08f4defe897049
  ABI hash: 1459feb3b351dfef208b15fae8382707
  export-list hash: 1e511f0f174a732d06179f42c8491210
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a85c36dde946de59e4f325575ade6901
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Card.standardDeck
module dependencies:
package dependencies: base-4.10.0.0* ghc-prim-0.5.1.0
                      integer-gmp-1.0.1.0
orphans: base-4.10.0.0:GHC.Base base-4.10.0.0:GHC.Float
family instance modules: base-4.10.0.0:Control.Applicative
                         base-4.10.0.0:Data.Either base-4.10.0.0:Data.Functor.Const
                         base-4.10.0.0:Data.Functor.Identity base-4.10.0.0:Data.Monoid
                         base-4.10.0.0:Data.Type.Equality base-4.10.0.0:GHC.Generics
                         base-4.10.0.0:GHC.IO.Exception base-4.10.0.0:GHC.TypeLits
                         base-4.10.0.0:GHC.TypeNats
import  -/  base-4.10.0.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.0.0:GHC.Enum 5a1ba50c23f92f669e01f8955f202337
import  -/  base-4.10.0.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.0.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.0.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.0.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.0:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.0:GHC.Types b1fd0716441595db508c1a74387bf394
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank :: GHC.Enum.Enum Data.Card.Rank
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fEnumRank_$csucc
                  Data.Card.$fEnumRank_$cpred
                  Data.Card.$fEnumRank_$ctoEnum
                  Data.Card.$fEnumRank_$cfromEnum
                  Data.Card.$fEnumRank_$cenumFrom
                  Data.Card.$fEnumRank_$cenumFromThen
                  Data.Card.$fEnumRank_$cenumFromTo
                  Data.Card.$fEnumRank_$cenumFromThenTo -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank1 :: Data.Card.Rank
  {- Strictness: x -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank2 :: Data.Card.Rank
  {- Strictness: x -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cenumFrom :: Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (a :: Data.Card.Rank) ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank a of a# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# 12#) of wild {
                   GHC.Types.False -> Data.Card.$fEnumRank_go a#
                   GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cenumFromThen ::
    Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank a of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank b of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# b# a#) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># 12# b#) of wild2 {
                             GHC.Types.False
                             -> GHC.Types.:
                                  @ Data.Card.Rank
                                  (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                  (let {
                                     delta :: GHC.Prim.Int# = GHC.Prim.-# b# a#
                                   } in
                                   let {
                                     y' :: GHC.Prim.Int# = GHC.Prim.-# 12# delta
                                   } in
                                   letrec {
                                     go_dn :: GHC.Prim.Int# -> [Data.Card.Rank]
                                       {- Arity: 1, Strictness: <S,U> -}
                                     = \ (x :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# x y') of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (go_dn (GHC.Prim.+# x delta))
                                         GHC.Types.True
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (GHC.Types.[] @ Data.Card.Rank) }
                                   } in
                                   go_dn b#)
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># 12# a#) of wild3 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ Data.Card.Rank
                                       (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                       (GHC.Types.[] @ Data.Card.Rank)
                                  GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# 12# b#) of wild2 {
                             GHC.Types.False
                             -> GHC.Types.:
                                  @ Data.Card.Rank
                                  (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                  (let {
                                     delta :: GHC.Prim.Int# = GHC.Prim.-# b# a#
                                   } in
                                   let {
                                     y' :: GHC.Prim.Int# = GHC.Prim.-# 12# delta
                                   } in
                                   letrec {
                                     go_up :: GHC.Prim.Int# -> [Data.Card.Rank]
                                       {- Arity: 1, Strictness: <S,U> -}
                                     = \ (x :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.># x y') of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (go_up (GHC.Prim.+# x delta))
                                         GHC.Types.True
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (GHC.Types.[] @ Data.Card.Rank) }
                                   } in
                                   go_up b#)
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 12# a#) of wild3 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ Data.Card.Rank
                                       (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                       (GHC.Types.[] @ Data.Card.Rank)
                                  GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } } }
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# b# a#) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># 0# b#) of wild2 {
                             GHC.Types.False
                             -> GHC.Types.:
                                  @ Data.Card.Rank
                                  (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                  (let {
                                     delta :: GHC.Prim.Int# = GHC.Prim.-# b# a#
                                   } in
                                   let {
                                     y' :: GHC.Prim.Int# = GHC.Prim.-# 0# delta
                                   } in
                                   letrec {
                                     go_dn :: GHC.Prim.Int# -> [Data.Card.Rank]
                                       {- Arity: 1, Strictness: <S,U> -}
                                     = \ (x :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# x y') of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (go_dn (GHC.Prim.+# x delta))
                                         GHC.Types.True
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (GHC.Types.[] @ Data.Card.Rank) }
                                   } in
                                   go_dn b#)
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># 0# a#) of wild3 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ Data.Card.Rank
                                       (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                       (GHC.Types.[] @ Data.Card.Rank)
                                  GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# 0# b#) of wild2 {
                             GHC.Types.False
                             -> GHC.Types.:
                                  @ Data.Card.Rank
                                  (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                  (let {
                                     delta :: GHC.Prim.Int# = GHC.Prim.-# b# a#
                                   } in
                                   let {
                                     y' :: GHC.Prim.Int# = GHC.Prim.-# 0# delta
                                   } in
                                   letrec {
                                     go_up :: GHC.Prim.Int# -> [Data.Card.Rank]
                                       {- Arity: 1, Strictness: <S,U> -}
                                     = \ (x :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.># x y') of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (go_up (GHC.Prim.+# x delta))
                                         GHC.Types.True
                                         -> GHC.Types.:
                                              @ Data.Card.Rank
                                              (GHC.Prim.tagToEnum# @ Data.Card.Rank x)
                                              (GHC.Types.[] @ Data.Card.Rank) }
                                   } in
                                   go_up b#)
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 0# a#) of wild3 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ Data.Card.Rank
                                       (GHC.Prim.tagToEnum# @ Data.Card.Rank a#)
                                       (GHC.Types.[] @ Data.Card.Rank)
                                  GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cenumFromThenTo ::
    Data.Card.Rank
    -> Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 3, Strictness: <S,U><S,U><S,U> -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cenumFromTo ::
    Data.Card.Rank -> Data.Card.Rank -> [Data.Card.Rank]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank y of a#1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# a#1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [Data.Card.Rank]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ Data.Card.Rank
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> Data.Card.$wlvl x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 12#) of wild2 {
                                    GHC.Types.False -> Data.Card.$wlvl x1
                                    GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Rank x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 a#1) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank })
                      } in
                      go a#
                   GHC.Types.True -> GHC.Types.[] @ Data.Card.Rank } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cfromEnum :: Data.Card.Rank -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 GHC.Types.I# a# } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$cpred :: Data.Card.Rank -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ Data.Card.Rank (GHC.Prim.+# a# -1#)
                   0# -> Data.Card.$fEnumRank1 } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$csucc :: Data.Card.Rank -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# {
                   DEFAULT -> GHC.Prim.tagToEnum# @ Data.Card.Rank (GHC.Prim.+# a# 1#)
                   12# -> Data.Card.$fEnumRank2 } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_$ctoEnum :: GHC.Types.Int -> Data.Card.Rank
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Data.Card.$w$ctoEnum ww1 }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEnumRank_go :: GHC.Prim.Int# -> [Data.Card.Rank]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit :: GHC.Enum.Enum Data.Card.Suit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fEnumSuit_$csucc
                  Data.Card.$fEnumSuit_$cpred
                  Data.Card.$fEnumSuit_$ctoEnum
                  Data.Card.$fEnumSuit_$cfromEnum
                  Data.Card.$fEnumSuit_$cenumFrom
                  Data.Card.$fEnumSuit_$cenumFromThen
                  Data.Card.$fEnumSuit_$cenumFromTo
                  Data.Card.$fEnumSuit_$cenumFromThenTo -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit1 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go4 3#) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit2 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go4 2#) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit3 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go4 1#) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit4 :: [Data.Card.Suit]
  {- Unfolding: (Data.Card.$fEnumSuit_go4 0#) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit5 :: Data.Card.Suit
  {- Strictness: x -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit6 :: Data.Card.Suit
  {- Strictness: x -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cenumFrom :: Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.$fEnumSuit4
                   Data.Card.Diamonds -> Data.Card.$fEnumSuit3
                   Data.Card.Hearts -> Data.Card.$fEnumSuit2
                   Data.Card.Spades -> Data.Card.$fEnumSuit1 }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cenumFromThen ::
    Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cenumFromThenTo ::
    Data.Card.Suit
    -> Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cenumFromTo ::
    Data.Card.Suit -> Data.Card.Suit -> [Data.Card.Suit]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 let {
                   $j :: GHC.Prim.Int# -> [Data.Card.Suit]
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Data.Card.Clubs
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 0#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go3 a#
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Diamonds
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 1#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go2 a#
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Hearts
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 2#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go1 a#
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit }
                       Data.Card.Spades
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 3#) of wild1 {
                            GHC.Types.False -> Data.Card.$fEnumSuit_go a#
                            GHC.Types.True -> GHC.Types.[] @ Data.Card.Suit } }
                 } in
                 case x of wild {
                   Data.Card.Clubs -> $j 0#
                   Data.Card.Diamonds -> $j 1#
                   Data.Card.Hearts -> $j 2#
                   Data.Card.Spades -> $j 3# }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cfromEnum :: Data.Card.Suit -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> GHC.Types.I# 0#
                   Data.Card.Diamonds -> GHC.Types.I# 1#
                   Data.Card.Hearts -> GHC.Types.I# 2#
                   Data.Card.Spades -> GHC.Types.I# 3# }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$cpred :: Data.Card.Suit -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.$fEnumSuit5
                   Data.Card.Diamonds -> Data.Card.Clubs
                   Data.Card.Hearts -> Data.Card.Diamonds
                   Data.Card.Spades -> Data.Card.Hearts }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$csucc :: Data.Card.Suit -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs -> Data.Card.Diamonds
                   Data.Card.Diamonds -> Data.Card.Hearts
                   Data.Card.Hearts -> Data.Card.Spades
                   Data.Card.Spades -> Data.Card.$fEnumSuit6 }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_$ctoEnum :: GHC.Types.Int -> Data.Card.Suit
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Data.Card.$w$ctoEnum1 ww1 }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_go :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U>m2 -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_go1 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U>m2 -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_go2 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U>m2 -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_go3 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, Strictness: <L,U>m2 -}
8873d74fe31f17a6f406fb035954b4d5
  $fEnumSuit_go4 :: GHC.Prim.Int# -> [Data.Card.Suit]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEqRank :: GHC.Classes.Eq Data.Card.Rank
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank Data.Card.$fEqRank_$c== Data.Card.$fEqRank_$c/= -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEqRank_$c/= :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# a# b#) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fEqRank_$c== :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# a# b#) } } } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEqSuit :: GHC.Classes.Eq Data.Card.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit Data.Card.$fEqSuit_$c== Data.Card.$fEqSuit_$c/= -}
8873d74fe31f17a6f406fb035954b4d5
  $fEqSuit_$c/= :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Clubs -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Diamonds -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Hearts -> GHC.Types.False }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.False } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fEqSuit_$c== :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Data.Card.Suit) (ds1 :: Data.Card.Suit) ->
                 case ds of wild {
                   Data.Card.Clubs
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Clubs -> GHC.Types.True }
                   Data.Card.Diamonds
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Diamonds -> GHC.Types.True }
                   Data.Card.Hearts
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Hearts -> GHC.Types.True }
                   Data.Card.Spades
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.True } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank :: GHC.Classes.Ord Data.Card.Rank
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fEqRank
                  Data.Card.$fOrdRank_$ccompare
                  Data.Card.$fOrdRank_$c<
                  Data.Card.$fOrdRank_$c<=
                  Data.Card.$fOrdRank_$c>
                  Data.Card.$fOrdRank_$c>=
                  Data.Card.$fOrdRank_$cmax
                  Data.Card.$fOrdRank_$cmin -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$c< :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<# a# b#) } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$c<= ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case b of x1 { DEFAULT ->
                 case a of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$c> :: Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case b of x1 { DEFAULT ->
                 case a of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<# a# b#) } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$c>= ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$ccompare ::
    Data.Card.Rank -> Data.Card.Rank -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Card.Rank) (b :: Data.Card.Rank) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$cmax ::
    Data.Card.Rank -> Data.Card.Rank -> Data.Card.Rank
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 case y of x1 { DEFAULT ->
                 case x of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } } } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fOrdRank_$cmin ::
    Data.Card.Rank -> Data.Card.Rank -> Data.Card.Rank
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Card.Rank) (y :: Data.Card.Rank) ->
                 case y of x1 { DEFAULT ->
                 case x of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x1 of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Data.Card.Rank x2 of b# { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } } } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit :: GHC.Classes.Ord Data.Card.Suit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fEqSuit
                  Data.Card.$fOrdSuit_$ccompare
                  Data.Card.$fOrdSuit_$c<
                  Data.Card.$fOrdSuit_$c<=
                  Data.Card.$fOrdSuit_$c>
                  Data.Card.$fOrdSuit_$c>=
                  Data.Card.$fOrdSuit_$cmax
                  Data.Card.$fOrdSuit_$cmin -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$c< :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.False
                        Data.Card.Diamonds -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.True
                        Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Data.Card.Spades -> GHC.Types.True }
                   Data.Card.Spades
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$c<= ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case b of wild {
                   Data.Card.Clubs
                   -> case a of wild1 {
                        Data.Card.Clubs -> GHC.Types.True
                        Data.Card.Diamonds -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Spades
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$c> :: Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 Data.Card.$fOrdSuit_$c< b a) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$c>= ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.True
                        Data.Card.Diamonds -> GHC.Types.False
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Data.Card.Hearts -> GHC.Types.False
                        Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Data.Card.Spades -> GHC.Types.False }
                   Data.Card.Spades
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$ccompare ::
    Data.Card.Suit -> Data.Card.Suit -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Data.Card.Suit) (b :: Data.Card.Suit) ->
                 case a of wild {
                   Data.Card.Clubs
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.EQ
                        Data.Card.Diamonds -> GHC.Types.LT
                        Data.Card.Hearts -> GHC.Types.LT
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Diamonds
                   -> case b of wild1 {
                        Data.Card.Clubs -> GHC.Types.GT
                        Data.Card.Diamonds -> GHC.Types.EQ
                        Data.Card.Hearts -> GHC.Types.LT
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Hearts
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Data.Card.Hearts -> GHC.Types.EQ
                        Data.Card.Spades -> GHC.Types.LT }
                   Data.Card.Spades
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT Data.Card.Spades -> GHC.Types.EQ } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$cmax ::
    Data.Card.Suit -> Data.Card.Suit -> Data.Card.Suit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 case y of wild {
                   Data.Card.Clubs -> x
                   Data.Card.Diamonds
                   -> case x of wild1 {
                        DEFAULT -> Data.Card.Diamonds
                        Data.Card.Hearts -> Data.Card.Hearts
                        Data.Card.Spades -> Data.Card.Spades }
                   Data.Card.Hearts
                   -> case x of wild1 {
                        DEFAULT -> Data.Card.Hearts Data.Card.Spades -> Data.Card.Spades }
                   Data.Card.Spades
                   -> case x of wild1 { DEFAULT -> Data.Card.Spades } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fOrdSuit_$cmin ::
    Data.Card.Suit -> Data.Card.Suit -> Data.Card.Suit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Data.Card.Suit) (y :: Data.Card.Suit) ->
                 case y of wild {
                   Data.Card.Clubs -> case x of wild1 { DEFAULT -> Data.Card.Clubs }
                   Data.Card.Diamonds
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Data.Card.Hearts -> Data.Card.Diamonds
                        Data.Card.Spades -> Data.Card.Diamonds }
                   Data.Card.Hearts
                   -> case x of wild1 {
                        DEFAULT -> wild1 Data.Card.Spades -> Data.Card.Hearts }
                   Data.Card.Spades -> x }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fShowRank :: GHC.Show.Show Data.Card.Rank
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Rank
                  Data.Card.$fShowRank_$cshowsPrec
                  Data.Card.$fShowRank_$cshow
                  Data.Card.$fShowRank_$cshowList -}
11c036ca26794a179d94100a840bf868
  $fShowRank1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowRank2) -}
f955a273ec45275d744f3767991d0f56
  $fShowRank10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ten"#) -}
0064d5720b0a73c32902a5995accba0c
  $fShowRank11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank12) -}
1cadaf4286cdd294cca432cb5188c0af
  $fShowRank12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nine"#) -}
ef0afea045f83048720d65de1b60361b
  $fShowRank13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank14) -}
eaf72f3b08b30ae937e67f2b1bbdcef8
  $fShowRank14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Eight"#) -}
082b61808b73e308f80dc10b41c68fc3
  $fShowRank15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank16) -}
48ca5d1f21f258be2684bba2a74e9b7e
  $fShowRank16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Seven"#) -}
9d25653ff155a2f17f7c42d250ac28f2
  $fShowRank17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank18) -}
725106977bfd6884290e69690bc0ad78
  $fShowRank18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Six"#) -}
3a49b3014542c631ac09e9c404114e04
  $fShowRank19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank20) -}
d1a46bb6d52c1b2bb954acc655b4411b
  $fShowRank2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ace"#) -}
ef95ffa46c594df819926c5829232656
  $fShowRank20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Five"#) -}
f2f2110bc5fd13fb8eed700946e3c700
  $fShowRank21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank22) -}
022426dbec8bc53ab8d51ade93743c10
  $fShowRank22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Four"#) -}
68f4f35ded67e644f2fdd886b31de5f8
  $fShowRank23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank24) -}
1016cf490afd3ddfb5a58c18edd21566
  $fShowRank24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Three"#) -}
9226bb661ec714ec093ca86629c10af9
  $fShowRank25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank26) -}
f25fbf772e713a12b172736f6ce9b4c9
  $fShowRank26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
2a174689d724d7e376c319520e616edc
  $fShowRank3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowRank4) -}
986cf4ec144c16a2b1792d9de0be8978
  $fShowRank4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("King"#) -}
7ba18ba0b038324f472a6620c04e9330
  $fShowRank5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowRank6) -}
a411c31a7f3ddf0018fd742770ec3614
  $fShowRank6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Queen"#) -}
c7dd4e87832b06728e83a7f71bf11b22
  $fShowRank7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowRank8) -}
2e8da27005d3d865f4709345b1c7e90c
  $fShowRank8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Jack"#) -}
911f13c0e2b7aea18e62084dfaac70e5
  $fShowRank9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Card.$fShowRank10) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fShowRank_$cshow :: Data.Card.Rank -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Card.Rank) ->
                 case x of wild {
                   Data.Card.Two -> Data.Card.$fShowRank25
                   Data.Card.Three -> Data.Card.$fShowRank23
                   Data.Card.Four -> Data.Card.$fShowRank21
                   Data.Card.Five -> Data.Card.$fShowRank19
                   Data.Card.Six -> Data.Card.$fShowRank17
                   Data.Card.Seven -> Data.Card.$fShowRank15
                   Data.Card.Eight -> Data.Card.$fShowRank13
                   Data.Card.Nine -> Data.Card.$fShowRank11
                   Data.Card.Ten -> Data.Card.$fShowRank9
                   Data.Card.Jack -> Data.Card.$fShowRank7
                   Data.Card.Queen -> Data.Card.$fShowRank5
                   Data.Card.King -> Data.Card.$fShowRank3
                   Data.Card.Ace -> Data.Card.$fShowRank1 }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fShowRank_$cshowList :: [Data.Card.Rank] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Card.Rank
                   Data.Card.$w$cshowsPrec) -}
8fd8c428ea3b610d90295d9ef22649e9
  $fShowRank_$cshowsPrec ::
    GHC.Types.Int -> Data.Card.Rank -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Card.Rank)
                   (w2 :: GHC.Base.String) ->
                 Data.Card.$w$cshowsPrec w1 w2) -}
8873d74fe31f17a6f406fb035954b4d5
  $fShowSuit :: GHC.Show.Show Data.Card.Suit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Card.Suit
                  Data.Card.$fShowSuit_$cshowsPrec
                  Data.Card.$fShowSuit_$cshow
                  Data.Card.$fShowSuit_$cshowList -}
ce710db3c38594f38b2325279e961799
  $fShowSuit1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowSuit2) -}
4b6810ea78cfe1634f82343feb37739d
  $fShowSuit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Spades"#) -}
3acda467da9aa93d583969638eadcef2
  $fShowSuit3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowSuit4) -}
7705f2a500b5c567ae80415621afe52c
  $fShowSuit4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hearts"#) -}
6ef326154b1855ef12d9d0281960f3f7
  $fShowSuit5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowSuit6) -}
19e10763ce99fdb68b750f5dbace99f5
  $fShowSuit6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Diamonds"#) -}
00855fc58a4f46f0273e96302a46658e
  $fShowSuit7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Data.Card.$fShowSuit8) -}
0c0118679f77893f3aab1cc9818b1a8a
  $fShowSuit8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Clubs"#) -}
8873d74fe31f17a6f406fb035954b4d5
  $fShowSuit_$cshow :: Data.Card.Suit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Card.Suit) ->
                 case x of wild {
                   Data.Card.Clubs -> Data.Card.$fShowSuit7
                   Data.Card.Diamonds -> Data.Card.$fShowSuit5
                   Data.Card.Hearts -> Data.Card.$fShowSuit3
                   Data.Card.Spades -> Data.Card.$fShowSuit1 }) -}
8873d74fe31f17a6f406fb035954b4d5
  $fShowSuit_$cshowList :: [Data.Card.Suit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Card.Suit
                   Data.Card.$w$cshowsPrec1) -}
8873d74fe31f17a6f406fb035954b4d5
  $fShowSuit_$cshowsPrec ::
    GHC.Types.Int -> Data.Card.Suit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Card.Suit)
                   (w2 :: GHC.Base.String) ->
                 Data.Card.$w$cshowsPrec1 w1 w2) -}
43cc358800290c7069d6cb583f0d9e3d
  $tc'Ace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11497610008782169451##
                   2647303077897048236##
                   Data.Card.$trModule
                   Data.Card.$tc'Ace2
                   0#
                   Data.Card.$tc'Ace1) -}
df4af6cf76b2878bd456651686c2c30b
  $tc'Ace1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
95a1527feada36555b2f8ad397285e1c
  $tc'Ace2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Ace3) -}
5f6e7c43f6de28742366f3e80648e3db
  $tc'Ace3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ace"#) -}
84e02fe4a6180ef0ce338a92904ee235
  $tc'Clubs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2094660319655294879##
                   1830444982587404262##
                   Data.Card.$trModule
                   Data.Card.$tc'Clubs2
                   0#
                   Data.Card.$tc'Clubs1) -}
fb2a21f4a5a361890f1d94bc08f93d2a
  $tc'Clubs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
87b81c4db134707c344408da85553f9d
  $tc'Clubs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Clubs3) -}
53a81a94583c94b0f5d5d256d75bcef2
  $tc'Clubs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Clubs"#) -}
43a49f921d6c480f3ac397a41bfc2480
  $tc'Diamonds :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6876803594455768895##
                   3771135762876343451##
                   Data.Card.$trModule
                   Data.Card.$tc'Diamonds1
                   0#
                   Data.Card.$tc'Clubs1) -}
79ba0d6392780a55274e7820ccef8efa
  $tc'Diamonds1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Diamonds2) -}
889ffb8e15715db61218d4fa1f72e290
  $tc'Diamonds2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Diamonds"#) -}
dee7d060e179137c6d86e61fbc04e22c
  $tc'Eight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11830641583394951182##
                   14706065724311399905##
                   Data.Card.$trModule
                   Data.Card.$tc'Eight1
                   0#
                   Data.Card.$tc'Ace1) -}
607410e05b61af313337edb83ab21a71
  $tc'Eight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Eight2) -}
3510a2ccb4853ce50e8752b444179676
  $tc'Eight2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eight"#) -}
f3ad8a7fb0e68232267a9de9147ba3af
  $tc'Five :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15521263278847352455##
                   6923143843921939084##
                   Data.Card.$trModule
                   Data.Card.$tc'Five1
                   0#
                   Data.Card.$tc'Ace1) -}
29eddea9b66f497f755141e1f7c5dc52
  $tc'Five1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Five2) -}
e98a20d36265da5a89c219a4bb8ad88d
  $tc'Five2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Five"#) -}
9d489886f5e48cdd6c153641a23b790c
  $tc'Four :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18078473230450013555##
                   9870149569710149593##
                   Data.Card.$trModule
                   Data.Card.$tc'Four1
                   0#
                   Data.Card.$tc'Ace1) -}
f16cdadc11f7203e98d2fc8ce3f4edcf
  $tc'Four1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Four2) -}
098100733babe63f662bb8158adf6ab0
  $tc'Four2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Four"#) -}
830741ed8fd0b848530f7348bf07f26d
  $tc'Hearts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   905390064691339237##
                   6338762176966955142##
                   Data.Card.$trModule
                   Data.Card.$tc'Hearts1
                   0#
                   Data.Card.$tc'Clubs1) -}
f911c1369de6d3b90f8ac141cf15ea4f
  $tc'Hearts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Hearts2) -}
12f8af25ac1e5376b7a01b42f1093d66
  $tc'Hearts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hearts"#) -}
3b11e3ebe6d6a9ba62c54dafb397ce9c
  $tc'Jack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11142047190728170746##
                   10486829510216905299##
                   Data.Card.$trModule
                   Data.Card.$tc'Jack1
                   0#
                   Data.Card.$tc'Ace1) -}
b2e6b6fb4572f1700b4ad7b222c77b61
  $tc'Jack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Jack2) -}
e4f2671b5ba6eb598106d6c1ffb5e452
  $tc'Jack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Jack"#) -}
dd9b7b0629927479b07e1be59829ecb4
  $tc'King :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13871393485485063094##
                   13008568326885886566##
                   Data.Card.$trModule
                   Data.Card.$tc'King1
                   0#
                   Data.Card.$tc'Ace1) -}
afd42130887151a9e8da781cc9f0fe09
  $tc'King1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'King2) -}
8498be07ef5faddc7c25a67e14bab895
  $tc'King2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'King"#) -}
aeb1ce991d24e52bd654eca5a5f821c2
  $tc'Nine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4371082964650959483##
                   10115607268317546452##
                   Data.Card.$trModule
                   Data.Card.$tc'Nine1
                   0#
                   Data.Card.$tc'Ace1) -}
2896f27465b35a5d02731dc1b545c660
  $tc'Nine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Nine2) -}
0d2311b5255f3255f4e93b030e7406d5
  $tc'Nine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Nine"#) -}
552e5f2d1ef5bd9d1cae83ff900768fe
  $tc'Queen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6490341201792387659##
                   1256845991519506539##
                   Data.Card.$trModule
                   Data.Card.$tc'Queen1
                   0#
                   Data.Card.$tc'Ace1) -}
5701fd6b4dcd02c3dbd44b50c6f9c00d
  $tc'Queen1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Queen2) -}
33ea56045f2497ea3777cf8cee722696
  $tc'Queen2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Queen"#) -}
69f9ef5b61776259760942941abafb49
  $tc'Seven :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10782110474018729497##
                   8943747333992560656##
                   Data.Card.$trModule
                   Data.Card.$tc'Seven1
                   0#
                   Data.Card.$tc'Ace1) -}
5166659d6263605ecff1fa721f7fa3d8
  $tc'Seven1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Seven2) -}
1f8e34ecb4fa79b681ee811a74134455
  $tc'Seven2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Seven"#) -}
1fb808db394ebd5a65eed557078f8255
  $tc'Six :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13984512738607285902##
                   5907997081569594914##
                   Data.Card.$trModule
                   Data.Card.$tc'Six1
                   0#
                   Data.Card.$tc'Ace1) -}
ff7fa0a2c983082e77457384e84c631b
  $tc'Six1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Six2) -}
58f9c28817ea0f9f76b8ed325a89274d
  $tc'Six2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Six"#) -}
f31c1ea9e7361dc400a6854bf3e9010d
  $tc'Spades :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8365871130726246213##
                   6581325213003648253##
                   Data.Card.$trModule
                   Data.Card.$tc'Spades1
                   0#
                   Data.Card.$tc'Clubs1) -}
54a8c14eb6ca5065a3812858ac7c2b12
  $tc'Spades1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Spades2) -}
32c874b46ff46d5b29afaef8410c0f77
  $tc'Spades2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Spades"#) -}
02fec6bf4f24b8967f04eaf84e8b47e6
  $tc'Ten :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12343148646837008625##
                   7854289751113972758##
                   Data.Card.$trModule
                   Data.Card.$tc'Ten1
                   0#
                   Data.Card.$tc'Ace1) -}
a98f497354d18dbea34f8d5b309e5121
  $tc'Ten1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Ten2) -}
b224abb2b053ed095a9c4ed7f820a2ca
  $tc'Ten2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ten"#) -}
6d39770d6a0c667ed4126af656be56df
  $tc'Three :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11960687696522134210##
                   12958302654547966595##
                   Data.Card.$trModule
                   Data.Card.$tc'Three1
                   0#
                   Data.Card.$tc'Ace1) -}
61902360f0e416211ff05451d4bfe966
  $tc'Three1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Three2) -}
7f9793554cadb8b4a9877f24a461ea3f
  $tc'Three2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Three"#) -}
8562dee6cbef7851a31d1ce8147207f2
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2327849235597269829##
                   1585892276785965215##
                   Data.Card.$trModule
                   Data.Card.$tc'Two1
                   0#
                   Data.Card.$tc'Ace1) -}
25fe59e3732de7132a537c9d67751f68
  $tc'Two1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tc'Two2) -}
805541f675171f072043fb96cb43bd39
  $tc'Two2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
af6b66b6d174af8a62817c1106f58e09
  $tcRank :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13708045672349062297##
                   15557348109411590738##
                   Data.Card.$trModule
                   Data.Card.$tcRank1
                   0#
                   GHC.Types.krep$*) -}
a8dd10ddc40cebd0a1098bf9bf9b26a4
  $tcRank1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tcRank2) -}
220b1377f235c2ff2088ab411e24fbf4
  $tcRank2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rank"#) -}
14c87ec539e342e1eefa3b6f18d8fff1
  $tcSuit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4337205953670908929##
                   834439184368426970##
                   Data.Card.$trModule
                   Data.Card.$tcSuit1
                   0#
                   GHC.Types.krep$*) -}
8f90b43f2720515910128caa0d9190ce
  $tcSuit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$tcSuit2) -}
70b3bd43105f53821d7f9ea4c2b84d11
  $tcSuit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Suit"#) -}
a551380cb857b2fc1c0d2417f1af25cd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Card.$trModule3
                   Data.Card.$trModule1) -}
f48910ff13e6e3a7beed217adc1a37f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$trModule2) -}
bbd95d40538929231ab06011a7fa0615
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Card"#) -}
b91aa4481b939fdc48488ea28ada5a37
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Card.$trModule4) -}
5b5095dfbf9f73a7cfdeed7b8580a9ea
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Cards-0.1.0.0-Ex6GYQCLQeJFDIXDBioJ3g"#) -}
8fd8c428ea3b610d90295d9ef22649e9
  $w$cshowsPrec ::
    Data.Card.Rank -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Card.Rank) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Card.Two
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank25 w1
                   Data.Card.Three
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank23 w1
                   Data.Card.Four
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank21 w1
                   Data.Card.Five
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank19 w1
                   Data.Card.Six
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank17 w1
                   Data.Card.Seven
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank15 w1
                   Data.Card.Eight
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank13 w1
                   Data.Card.Nine
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank11 w1
                   Data.Card.Ten
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank9 w1
                   Data.Card.Jack
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank7 w1
                   Data.Card.Queen
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank5 w1
                   Data.Card.King
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank3 w1
                   Data.Card.Ace
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowRank1 w1 }) -}
8873d74fe31f17a6f406fb035954b4d5
  $w$cshowsPrec1 ::
    Data.Card.Suit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Card.Suit) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Card.Clubs
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit7 w1
                   Data.Card.Diamonds
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit5 w1
                   Data.Card.Hearts
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit3 w1
                   Data.Card.Spades
                   -> GHC.Base.++ @ GHC.Types.Char Data.Card.$fShowSuit1 w1 }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $w$ctoEnum :: GHC.Prim.Int# -> Data.Card.Rank
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Data.Card.$wlvl ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 12#) of wild1 {
                        GHC.Types.False -> Data.Card.$wlvl ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Rank ww } }) -}
8873d74fe31f17a6f406fb035954b4d5
  $w$ctoEnum1 :: GHC.Prim.Int# -> Data.Card.Suit
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Data.Card.$wlvl1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3#) of wild1 {
                        GHC.Types.False -> Data.Card.$wlvl1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Data.Card.Suit ww } }) -}
8fd8c428ea3b610d90295d9ef22649e9
  $wlvl :: GHC.Prim.Int# -> Data.Card.Rank
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
8873d74fe31f17a6f406fb035954b4d5
  $wlvl1 :: GHC.Prim.Int# -> Data.Card.Suit
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
08a24251c3723bf36d727c542df19be9
  type Card = (Data.Card.Rank, Data.Card.Suit)
fae667ba18b629b5e37787938d2d2047
  type Deck = [Data.Card.Card]
8fd8c428ea3b610d90295d9ef22649e9
  data Rank
    = Two
    | Three
    | Four
    | Five
    | Six
    | Seven
    | Eight
    | Nine
    | Ten
    | Jack
    | Queen
    | King
    | Ace
8873d74fe31f17a6f406fb035954b4d5
  data Suit = Clubs | Diamonds | Hearts | Spades
71ef9abdb628d90f9b5ae8b8c34a3399
  standardDeck :: Data.Card.Deck
  {- Unfolding: (Data.Card.standardDeck_go 0#) -}
91e8dcb0ab8402643fe8587b18667584
  standardDeck_go :: GHC.Prim.Int# -> [Data.Card.Card]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
instance [safe] GHC.Enum.Enum [Data.Card.Rank]
  = Data.Card.$fEnumRank
instance [safe] GHC.Enum.Enum [Data.Card.Suit]
  = Data.Card.$fEnumSuit
instance [safe] GHC.Classes.Eq [Data.Card.Rank]
  = Data.Card.$fEqRank
instance [safe] GHC.Classes.Eq [Data.Card.Suit]
  = Data.Card.$fEqSuit
instance [safe] GHC.Classes.Ord [Data.Card.Rank]
  = Data.Card.$fOrdRank
instance [safe] GHC.Classes.Ord [Data.Card.Suit]
  = Data.Card.$fOrdSuit
instance [safe] GHC.Show.Show [Data.Card.Rank]
  = Data.Card.$fShowRank
instance [safe] GHC.Show.Show [Data.Card.Suit]
  = Data.Card.$fShowSuit
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

